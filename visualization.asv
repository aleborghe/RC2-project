% Load and display background image
bg = imread('background.jpg');
figure;
imshow(bg);
hold on;

% Plot
plot(x_t, y_t, 'b-');
xlabel('x(t)');
ylabel('y(t)');
title('Smooth Continuous Path');
legend('Interpolated Path');

% Visualization

x = out.uni_state.signals.values(:, 1);
y = out.uni_state.signals.values(:, 2);
theta = out.uni_state.signals.values(:, 3);

h_unicycle = plot(x(1), y(1), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r'); % Unicycle
quiver_handle = quiver(x(1), y(1), cos(theta(1)), sin(theta(1)), 0.5, 'MaxHeadSize', 1);

triangle_size = 10; % Size of the triangle
base_width = triangle_size / 2; % Width of the triangle base

% Animation loop
for i = 1:size(x,1)
    % Define the triangle vertices relative to the unicycle
    local_vertices = [
        triangle_size, 0;                % Front tip
       -base_width, -base_width/2;       % Back-left
       -base_width,  base_width/2       % Back-right
    ];
     % Rotation matrix for orientation
    R = [cos(theta(i)), -sin(theta(i)); sin(theta(i)), cos(theta(i))];
    
    % Rotate and translate the triangle
    global_vertices = (R * local_vertices')';
    global_vertices(:, 1) = global_vertices(:, 1) + x(i);
    global_vertices(:, 2) = global_vertices(:, 2) + y(i);
    
    % Draw the triangle
    fill(global_vertices(:, 1), global_vertices(:, 2), 'r', 'EdgeColor', 'k');
    % Update unicycle position and orientation
    set(h_unicycle, 'XData', x(i), 'YData', y(i));
    set(quiver_handle, 'XData', x(i), 'YData', y(i), ...
        'UData', cos(theta(i)), 'VData', sin(theta(i)));
    
    drawnow;
    pause(dt); % Adjust for real-time animation
end

hold off;