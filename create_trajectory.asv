% Load and display background image
bg = imread('background.jpg');
figure;
imshow(bg);
hold on;

% Circuit Parameters
a = 365;       % Length of straight sections
b = 130;       % Width of straight sections
num_points = 500; % Number of points for smoothness
x_start = 125;
y_start = 60;

% Generate NASCAR Circuit
[x, y] = nascar_circuit(a, b, num_points, x_start, y_start);

%Plot parking lot
parkX = 290;  % x-coordinate of the lower-left corner
parkY = 80;  % y-coordinate of the lower-left corner
width = 60;  % Width of the rectangle
height = 30; % Height of the rectangle
rectangle('Position', [parkX, parkY, width, height], 'FaceColor', 'blue', 'EdgeColor', 'black');

% Waypoints
T = linspace(0, 10, num_points+1); % Seconds
fine_t = linspace(0, 10, (num_points+1)*10);

% Interpolation
x_t = spline(T, x, fine_t);             % Interpolate x(t)
y_t = spline(T, y, fine_t);             % Interpolate y(t)

% Plot
plot(x_t, y_t, 'b-');
xlabel('x(t)');
ylabel('y(t)');
title('Smooth Continuous Path');
legend('Interpolated Path');

% Visualization
figure;
hold on;
plot(path_x, path_y, 'k--', 'LineWidth', 1.5); % Plot the circuit
h_unicycle = plot(x(1), y(1), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r'); % Unicycle
quiver_handle = quiver(x(1), y(1), cos(theta(1)), sin(theta(1)), 0.5, 'MaxHeadSize', 1);

axis equal;
grid on;
title('Unicycle on Circuit');
xlabel('X');
ylabel('Y');

% Animation loop
for i = 1:num_steps
    % Update unicycle position and orientation
    set(h_unicycle, 'XData', x(i), 'YData', y(i));
    set(quiver_handle, 'XData', x(i), 'YData', y(i), ...
        'UData', cos(theta(i)), 'VData', sin(theta(i)));
    
    drawnow;
    pause(dt); % Adjust for real-time animation
end

hold off;

%compute velocity
dt = mean(diff(fine_t));
v_x = diff(x_t) / dt;  
v_y = diff(y_t) / dt;

% Time vector for velocity (shorter by one point)
t_velocity = fine_t(1:end-1);

% figure
% plot(t_velocity, v_x, 'r', t_velocity, v_y, 'b');
% title('Velocity Components');
% legend('v_x', 'v_y');
% xlabel('Time (s)');
% ylabel('Velocity');

theta_ref = atan2(v_y, v_x);


data = [x_t(1:end-1); y_t(1:end-1); theta_ref]'; % Transponiamo per avere [N, 3]
time = t_velocity'; % Il tempo deve essere una colonna

% Creiamo una timeseries con le dimensioni appropriate
ref_data = timeseries(data, time);
ref_data.Name = 'ReferenceData';  % Nome opzionale per la variabile
% Visualization

x = out.uni_state(1)

h_unicycle = plot(x_t(1), y_t(1), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r'); % Unicycle
quiver_handle = quiver(x_t(1), y_t(1), cos(theta_ref(1)), sin(theta_ref(1)), 0.5, 'MaxHeadSize', 1);

% Animation loop
for i = 1:num_steps
    % Update unicycle position and orientation
    set(h_unicycle, 'XData', x(i), 'YData', y(i));
    set(quiver_handle, 'XData', x(i), 'YData', y(i), ...
        'UData', cos(theta(i)), 'VData', sin(theta(i)));
    
    drawnow;
    pause(dt); % Adjust for real-time animation
end

hold off;